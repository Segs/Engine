<?xml version="1.0" encoding="UTF-8" ?>
<class name="RenderingServerEnums" inherits="Object" version="4.0">
    <brief_description>
        Fake class to simulate the missing nested namespace support.
    </brief_description>
    <description>
    </description>
    <tutorials>
    </tutorials>
    <methods>
    </methods>
    <signals>
    </signals>
    <constants>
        <constant name="NO_INDEX_ARRAY" value="-1">
            Marks an error that shows that the index array is empty.
        </constant>
        <constant name="ARRAY_WEIGHTS_SIZE" value="4">
            Number of weights/bones per vertex.
        </constant>
        <constant name="CANVAS_ITEM_Z_MIN" value="-4096">
            The minimum Z-layer for canvas items.
        </constant>
        <constant name="CANVAS_ITEM_Z_MAX" value="4096">
            The maximum Z-layer for canvas items.
        </constant>
        <constant name="MAX_GLOW_LEVELS" value="7">
            Max number of glow levels that can be used with glow post-process effect.
        </constant>
        <constant name="MAX_CURSORS" value="8">
            Unused enum in Godot 3.x.
        </constant>
        <constant name="MATERIAL_RENDER_PRIORITY_MIN" value="-128">
            The minimum renderpriority of all materials.
        </constant>
        <constant name="MATERIAL_RENDER_PRIORITY_MAX" value="127">
            The maximum renderpriority of all materials.
        </constant>
        <constant name="CUBEMAP_LEFT" value="0" enum="RenderingServerEnums.CubeMapSide">
            Marks the left side of a cubemap.
        </constant>
        <constant name="CUBEMAP_RIGHT" value="1" enum="RenderingServerEnums.CubeMapSide">
            Marks the right side of a cubemap.
        </constant>
        <constant name="CUBEMAP_BOTTOM" value="2" enum="RenderingServerEnums.CubeMapSide">
            Marks the bottom side of a cubemap.
        </constant>
        <constant name="CUBEMAP_TOP" value="3" enum="RenderingServerEnums.CubeMapSide">
            Marks the top side of a cubemap.
        </constant>
        <constant name="CUBEMAP_FRONT" value="4" enum="RenderingServerEnums.CubeMapSide">
            Marks the front side of a cubemap.
        </constant>
        <constant name="CUBEMAP_BACK" value="5" enum="RenderingServerEnums.CubeMapSide">
            Marks the back side of a cubemap.
        </constant>
        <constant name="TEXTURE_TYPE_2D" value="0" enum="RenderingServerEnums.TextureType">
            Normal texture with 2 dimensions, width and height.
        </constant>
        <constant name="TEXTURE_TYPE_EXTERNAL" value="1" enum="RenderingServerEnums.TextureType">
            Externally provided texture.
        </constant>
        <constant name="TEXTURE_TYPE_CUBEMAP" value="2" enum="RenderingServerEnums.TextureType">
            Texture made up of six faces, can be looked up with a [code]vec3[/code] in shader.
        </constant>
        <constant name="TEXTURE_TYPE_2D_ARRAY" value="3" enum="RenderingServerEnums.TextureType">
            An array of 2-dimensional textures.
        </constant>
        <constant name="TEXTURE_TYPE_3D" value="4" enum="RenderingServerEnums.TextureType">
            A 3-dimensional texture with width, height, and depth.
        </constant>
        <constant name="TEXTURE_FLAG_MIPMAPS" value="1" enum="RenderingServerEnums.TextureFlags">
            Generates mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio.
        </constant>
        <constant name="TEXTURE_FLAG_REPEAT" value="2" enum="RenderingServerEnums.TextureFlags">
            Repeats the texture (instead of clamp to edge).
        </constant>
        <constant name="TEXTURE_FLAG_FILTER" value="4" enum="RenderingServerEnums.TextureFlags">
            Uses a magnifying filter, to enable smooth zooming in of the texture.
        </constant>
        <constant name="TEXTURE_FLAG_ANISOTROPIC_FILTER" value="8" enum="RenderingServerEnums.TextureFlags">
            Uses anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.
            This results in better-looking textures when viewed from oblique angles.
        </constant>
        <constant name="TEXTURE_FLAG_CONVERT_TO_LINEAR" value="16" enum="RenderingServerEnums.TextureFlags">
            Converts the texture to the sRGB color space.
        </constant>
        <constant name="TEXTURE_FLAG_MIRRORED_REPEAT" value="32" enum="RenderingServerEnums.TextureFlags">
            Repeats the texture with alternate sections mirrored.
        </constant>
        <constant name="TEXTURE_FLAG_USED_FOR_STREAMING" value="2048" enum="RenderingServerEnums.TextureFlags">
            Texture is a video surface.
        </constant>
        <constant name="TEXTURE_FLAGS_DEFAULT" value="7" enum="RenderingServerEnums.TextureFlags">
            Default flags. [constant RenderingServerEnums.TEXTURE_FLAG_MIPMAPS], [constant RenderingServerEnums.TEXTURE_FLAG_REPEAT] and [constant RenderingServerEnums.TEXTURE_FLAG_FILTER] are enabled.
        </constant>
        <constant name="SHADER_SPATIAL" value="0" enum="RenderingServerEnums.ShaderMode">
            Shader is a 3D shader.
        </constant>
        <constant name="SHADER_CANVAS_ITEM" value="1" enum="RenderingServerEnums.ShaderMode">
            Shader is a 2D shader.
        </constant>
        <constant name="SHADER_PARTICLES" value="2" enum="RenderingServerEnums.ShaderMode">
            Shader is a particle shader.
        </constant>
        <constant name="SHADER_MAX" value="3" enum="RenderingServerEnums.ShaderMode">
            Represents the size of the [enum RenderingServerEnums.ShaderMode] enum.
        </constant>
        <constant name="ARRAY_VERTEX" value="0" enum="RenderingServerEnums.ArrayType">
            Array is a vertex array.
        </constant>
        <constant name="ARRAY_NORMAL" value="1" enum="RenderingServerEnums.ArrayType">
            Array is a normal array.
        </constant>
        <constant name="ARRAY_TANGENT" value="2" enum="RenderingServerEnums.ArrayType">
            Array is a tangent array.
        </constant>
        <constant name="ARRAY_COLOR" value="3" enum="RenderingServerEnums.ArrayType">
            Array is a color array.
        </constant>
        <constant name="ARRAY_TEX_UV" value="4" enum="RenderingServerEnums.ArrayType">
            Array is an UV coordinates array.
        </constant>
        <constant name="ARRAY_TEX_UV2" value="5" enum="RenderingServerEnums.ArrayType">
            Array is an UV coordinates array for the second UV coordinates.
        </constant>
        <constant name="ARRAY_BONES" value="6" enum="RenderingServerEnums.ArrayType">
            Array contains bone information.
        </constant>
        <constant name="ARRAY_WEIGHTS" value="7" enum="RenderingServerEnums.ArrayType">
            Array is weight information.
        </constant>
        <constant name="ARRAY_INDEX" value="8" enum="RenderingServerEnums.ArrayType">
            Array is index array.
        </constant>
        <constant name="ARRAY_MAX" value="9" enum="RenderingServerEnums.ArrayType">
            Represents the size of the [enum RenderingServerEnums.ArrayType] enum.
        </constant>
        <constant name="ARRAY_FORMAT_VERTEX" value="1" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a vertex array.
        </constant>
        <constant name="ARRAY_FORMAT_NORMAL" value="2" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a normal array.
        </constant>
        <constant name="ARRAY_FORMAT_TANGENT" value="4" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a tangent array.
        </constant>
        <constant name="ARRAY_FORMAT_COLOR" value="8" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a color array.
        </constant>
        <constant name="ARRAY_FORMAT_TEX_UV" value="16" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark an UV coordinates array.
        </constant>
        <constant name="ARRAY_FORMAT_TEX_UV2" value="32" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark an UV coordinates array for the second UV coordinates.
        </constant>
        <constant name="ARRAY_FORMAT_BONES" value="64" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a bone information array.
        </constant>
        <constant name="ARRAY_FORMAT_WEIGHTS" value="128" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a weights array.
        </constant>
        <constant name="ARRAY_FORMAT_INDEX" value="256" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark an index array.
        </constant>
        <constant name="ARRAY_COMPRESS_VERTEX" value="512" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a compressed (half float) vertex array.
        </constant>
        <constant name="ARRAY_COMPRESS_NORMAL" value="1024" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a compressed (half float) normal array.
        </constant>
        <constant name="ARRAY_COMPRESS_TANGENT" value="2048" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a compressed (half float) tangent array.
        </constant>
        <constant name="ARRAY_COMPRESS_COLOR" value="4096" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a compressed (half float) color array.
        </constant>
        <constant name="ARRAY_COMPRESS_TEX_UV" value="8192" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a compressed (half float) UV coordinates array.
        </constant>
        <constant name="ARRAY_COMPRESS_TEX_UV2" value="16384" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a compressed (half float) UV coordinates array for the second UV coordinates.
        </constant>
        <constant name="ARRAY_COMPRESS_BONES" value="32768" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a compressed bone array.
        </constant>
        <constant name="ARRAY_COMPRESS_WEIGHTS" value="65536" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a compressed (half float) weight array.
        </constant>
        <constant name="ARRAY_COMPRESS_INDEX" value="131072" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark a compressed index array.
        </constant>
        <constant name="ARRAY_FLAG_USE_2D_VERTICES" value="262144" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark that the array contains 2D vertices.
        </constant>
        <constant name="ARRAY_FLAG_USE_16_BIT_BONES" value="524288" enum="RenderingServerEnums.ArrayFormat">
            Flag used to mark that the array uses 16-bit bones instead of 8-bit.
        </constant>
        <constant name="ARRAY_COMPRESS_DEFAULT" value="97280" enum="RenderingServerEnums.ArrayFormat">
            Used to set flags [constant RenderingServerEnums.ARRAY_COMPRESS_VERTEX], [constant RenderingServerEnums.ARRAY_COMPRESS_NORMAL], [constant RenderingServerEnums.ARRAY_COMPRESS_TANGENT], [constant RenderingServerEnums.ARRAY_COMPRESS_COLOR], [constant RenderingServerEnums.ARRAY_COMPRESS_TEX_UV], [constant RenderingServerEnums.ARRAY_COMPRESS_TEX_UV2] and [constant RenderingServerEnums.ARRAY_COMPRESS_WEIGHTS] quickly.
        </constant>
        <constant name="PRIMITIVE_POINTS" value="0" enum="RenderingServerEnums.PrimitiveType">
            Primitive to draw consists of points.
        </constant>
        <constant name="PRIMITIVE_LINES" value="1" enum="RenderingServerEnums.PrimitiveType">
            Primitive to draw consists of lines.
        </constant>
        <constant name="PRIMITIVE_LINE_STRIP" value="2" enum="RenderingServerEnums.PrimitiveType">
            Primitive to draw consists of a line strip from start to end.
        </constant>
        <constant name="PRIMITIVE_LINE_LOOP" value="3" enum="RenderingServerEnums.PrimitiveType">
            Primitive to draw consists of a line loop (a line strip with a line between the last and the first vertex).
        </constant>
        <constant name="PRIMITIVE_TRIANGLES" value="4" enum="RenderingServerEnums.PrimitiveType">
            Primitive to draw consists of triangles.
        </constant>
        <constant name="PRIMITIVE_TRIANGLE_STRIP" value="5" enum="RenderingServerEnums.PrimitiveType">
            Primitive to draw consists of a triangle strip (the last 3 vertices are always combined to make a triangle).
        </constant>
        <constant name="PRIMITIVE_TRIANGLE_FAN" value="6" enum="RenderingServerEnums.PrimitiveType">
            Primitive to draw consists of a triangle strip (the last 2 vertices are always combined with the first to make a triangle).
        </constant>
        <constant name="PRIMITIVE_MAX" value="7" enum="RenderingServerEnums.PrimitiveType">
            Represents the size of the [enum RenderingServerEnums.PrimitiveType] enum.
        </constant>
        <constant name="BLEND_SHAPE_MODE_NORMALIZED" value="0" enum="RenderingServerEnums.BlendShapeMode">
            Blend shapes are normalized.
        </constant>
        <constant name="BLEND_SHAPE_MODE_RELATIVE" value="1" enum="RenderingServerEnums.BlendShapeMode">
            Blend shapes are relative to base weight.
        </constant>
        <constant name="LIGHT_DIRECTIONAL" value="0" enum="RenderingServerEnums.LightType">
            Is a directional (sun) light.
        </constant>
        <constant name="LIGHT_OMNI" value="1" enum="RenderingServerEnums.LightType">
            Is an omni light.
        </constant>
        <constant name="LIGHT_SPOT" value="2" enum="RenderingServerEnums.LightType">
            Is a spot light.
        </constant>
        <constant name="LIGHT_PARAM_ENERGY" value="0" enum="RenderingServerEnums.LightParam">
            The light's energy.
        </constant>
        <constant name="LIGHT_PARAM_SPECULAR" value="2" enum="RenderingServerEnums.LightParam">
            The light's influence on specularity.
        </constant>
        <constant name="LIGHT_PARAM_RANGE" value="3" enum="RenderingServerEnums.LightParam">
            The light's range.
        </constant>
        <constant name="LIGHT_PARAM_ATTENUATION" value="4" enum="RenderingServerEnums.LightParam">
            The light's attenuation.
        </constant>
        <constant name="LIGHT_PARAM_SPOT_ANGLE" value="5" enum="RenderingServerEnums.LightParam">
            The spotlight's angle.
        </constant>
        <constant name="LIGHT_PARAM_SPOT_ATTENUATION" value="6" enum="RenderingServerEnums.LightParam">
            The spotlight's attenuation.
        </constant>
        <constant name="LIGHT_PARAM_CONTACT_SHADOW_SIZE" value="7" enum="RenderingServerEnums.LightParam">
            Scales the shadow color.
        </constant>
        <constant name="LIGHT_PARAM_SHADOW_MAX_DISTANCE" value="8" enum="RenderingServerEnums.LightParam">
            Max distance that shadows will be rendered.
        </constant>
        <constant name="LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET" value="9" enum="RenderingServerEnums.LightParam">
            Proportion of shadow atlas occupied by the first split.
        </constant>
        <constant name="LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET" value="10" enum="RenderingServerEnums.LightParam">
            Proportion of shadow atlas occupied by the second split.
        </constant>
        <constant name="LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET" value="11" enum="RenderingServerEnums.LightParam">
            Proportion of shadow atlas occupied by the third split. The fourth split occupies the rest.
        </constant>
        <constant name="LIGHT_PARAM_SHADOW_NORMAL_BIAS" value="12" enum="RenderingServerEnums.LightParam">
            Normal bias used to offset shadow lookup by object normal. Can be used to fix self-shadowing artifacts.
        </constant>
        <constant name="LIGHT_PARAM_SHADOW_BIAS" value="13" enum="RenderingServerEnums.LightParam">
            Bias the shadow lookup to fix self-shadowing artifacts.
        </constant>
        <constant name="LIGHT_PARAM_SHADOW_BIAS_SPLIT_SCALE" value="14" enum="RenderingServerEnums.LightParam">
            Increases bias on further splits to fix self-shadowing that only occurs far away from the camera.
        </constant>
        <constant name="LIGHT_PARAM_MAX" value="15" enum="RenderingServerEnums.LightParam">
            Represents the size of the [enum RenderingServerEnums.LightParam] enum.
        </constant>
        <constant name="LIGHT_OMNI_SHADOW_DUAL_PARABOLOID" value="0" enum="RenderingServerEnums.LightOmniShadowMode">
            Use a dual paraboloid shadow map for omni lights.
        </constant>
        <constant name="LIGHT_OMNI_SHADOW_CUBE" value="1" enum="RenderingServerEnums.LightOmniShadowMode">
            Use a cubemap shadow map for omni lights. Slower but better quality than dual paraboloid.
        </constant>
        <constant name="LIGHT_OMNI_SHADOW_DETAIL_VERTICAL" value="0" enum="RenderingServerEnums.LightOmniShadowDetail">
            Use more detail vertically when computing shadow map.
        </constant>
        <constant name="LIGHT_OMNI_SHADOW_DETAIL_HORIZONTAL" value="1" enum="RenderingServerEnums.LightOmniShadowDetail">
            Use more detail horizontally when computing shadow map.
        </constant>
        <constant name="LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL" value="0" enum="RenderingServerEnums.LightDirectionalShadowMode">
            Use orthogonal shadow projection for directional light.
        </constant>
        <constant name="LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS" value="1" enum="RenderingServerEnums.LightDirectionalShadowMode">
            Use 2 splits for shadow projection when using directional light.
        </constant>
        <constant name="LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS" value="2" enum="RenderingServerEnums.LightDirectionalShadowMode">
            Use 4 splits for shadow projection when using directional light.
        </constant>
        <constant name="LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_STABLE" value="0" enum="RenderingServerEnums.LightDirectionalShadowDepthRangeMode">
            Keeps shadows stable as camera moves but has lower effective resolution.
        </constant>
        <constant name="LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_OPTIMIZED" value="1" enum="RenderingServerEnums.LightDirectionalShadowDepthRangeMode">
            Optimize use of shadow maps, increasing the effective resolution. But may result in shadows moving or flickering slightly.
        </constant>
        <constant name="VIEWPORT_UPDATE_DISABLED" value="0" enum="RenderingServerEnums.ViewportUpdateMode">
            Do not update the viewport.
        </constant>
        <constant name="VIEWPORT_UPDATE_ONCE" value="1" enum="RenderingServerEnums.ViewportUpdateMode">
            Update the viewport once then set to disabled.
        </constant>
        <constant name="VIEWPORT_UPDATE_WHEN_VISIBLE" value="2" enum="RenderingServerEnums.ViewportUpdateMode">
            Update the viewport whenever it is visible.
        </constant>
        <constant name="VIEWPORT_UPDATE_ALWAYS" value="3" enum="RenderingServerEnums.ViewportUpdateMode">
            Always update the viewport.
        </constant>
        <constant name="VIEWPORT_CLEAR_ALWAYS" value="0" enum="RenderingServerEnums.ViewportClearMode">
            The viewport is always cleared before drawing.
        </constant>
        <constant name="VIEWPORT_CLEAR_NEVER" value="1" enum="RenderingServerEnums.ViewportClearMode">
            The viewport is never cleared before drawing.
        </constant>
        <constant name="VIEWPORT_CLEAR_ONLY_NEXT_FRAME" value="2" enum="RenderingServerEnums.ViewportClearMode">
            The viewport is cleared once, then the clear mode is set to [constant VIEWPORT_CLEAR_NEVER].
        </constant>
        <constant name="VIEWPORT_MSAA_DISABLED" value="0" enum="RenderingServerEnums.ViewportMSAA">
            Multisample antialiasing is disabled.
        </constant>
        <constant name="VIEWPORT_MSAA_2X" value="1" enum="RenderingServerEnums.ViewportMSAA">
            Multisample antialiasing is set to 2×.
        </constant>
        <constant name="VIEWPORT_MSAA_4X" value="2" enum="RenderingServerEnums.ViewportMSAA">
            Multisample antialiasing is set to 4×.
        </constant>
        <constant name="VIEWPORT_MSAA_8X" value="3" enum="RenderingServerEnums.ViewportMSAA">
            Multisample antialiasing is set to 8×.
        </constant>
        <constant name="VIEWPORT_MSAA_16X" value="4" enum="RenderingServerEnums.ViewportMSAA">
            Multisample antialiasing is set to 16×.
        </constant>
        <constant name="VIEWPORT_MSAA_EXT_2X" value="5" enum="RenderingServerEnums.ViewportMSAA">
            Multisample antialiasing is set to 2× on external texture. Special mode for GLES2 Android VR (Oculus Quest and Go).
        </constant>
        <constant name="VIEWPORT_MSAA_EXT_4X" value="6" enum="RenderingServerEnums.ViewportMSAA">
            Multisample antialiasing is set to 4× on external texture. Special mode for GLES2 Android VR (Oculus Quest and Go).
        </constant>
        <constant name="VIEWPORT_USAGE_2D" value="0" enum="RenderingServerEnums.ViewportUsage">
            The Viewport does not render 3D but samples.
        </constant>
        <constant name="VIEWPORT_USAGE_2D_NO_SAMPLING" value="1" enum="RenderingServerEnums.ViewportUsage">
            The Viewport does not render 3D and does not sample.
        </constant>
        <constant name="VIEWPORT_USAGE_3D" value="2" enum="RenderingServerEnums.ViewportUsage">
            The Viewport renders 3D with effects.
        </constant>
        <constant name="VIEWPORT_USAGE_3D_NO_EFFECTS" value="3" enum="RenderingServerEnums.ViewportUsage">
            The Viewport renders 3D but without effects.
        </constant>
        <constant name="VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME" value="0" enum="RenderingServerEnums.ViewportRenderInfo">
            Number of objects drawn in a single frame.
        </constant>
        <constant name="VIEWPORT_RENDER_INFO_VERTICES_IN_FRAME" value="1" enum="RenderingServerEnums.ViewportRenderInfo">
            Number of vertices drawn in a single frame.
        </constant>
        <constant name="VIEWPORT_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME" value="2" enum="RenderingServerEnums.ViewportRenderInfo">
            Number of material changes during this frame.
        </constant>
        <constant name="VIEWPORT_RENDER_INFO_SHADER_CHANGES_IN_FRAME" value="3" enum="RenderingServerEnums.ViewportRenderInfo">
            Number of shader changes during this frame.
        </constant>
        <constant name="VIEWPORT_RENDER_INFO_SURFACE_CHANGES_IN_FRAME" value="4" enum="RenderingServerEnums.ViewportRenderInfo">
            Number of surface changes during this frame.
        </constant>
        <constant name="VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME" value="5" enum="RenderingServerEnums.ViewportRenderInfo">
            Number of draw calls during this frame.
        </constant>
        <constant name="VIEWPORT_RENDER_INFO_2D_ITEMS_IN_FRAME" value="6" enum="RenderingServerEnums.ViewportRenderInfo">
            Number of 2d items drawn this frame.
        </constant>
        <constant name="VIEWPORT_RENDER_INFO_2D_DRAW_CALLS_IN_FRAME" value="7" enum="RenderingServerEnums.ViewportRenderInfo">
            Number of 2d draw calls during this frame.
        </constant>
        <constant name="VIEWPORT_RENDER_INFO_MAX" value="8" enum="RenderingServerEnums.ViewportRenderInfo">
            Represents the size of the [enum RenderingServerEnums.ViewportRenderInfo] enum.
        </constant>
        <constant name="VIEWPORT_DEBUG_DRAW_DISABLED" value="0" enum="RenderingServerEnums.ViewportDebugDraw">
            Debug draw is disabled. Default setting.
        </constant>
        <constant name="VIEWPORT_DEBUG_DRAW_UNSHADED" value="1" enum="RenderingServerEnums.ViewportDebugDraw">
            Debug draw sets objects to unshaded.
        </constant>
        <constant name="VIEWPORT_DEBUG_DRAW_OVERDRAW" value="2" enum="RenderingServerEnums.ViewportDebugDraw">
            Overwrites clear color to [code](0,0,0,0)[/code].
        </constant>
        <constant name="VIEWPORT_DEBUG_DRAW_WIREFRAME" value="3" enum="RenderingServerEnums.ViewportDebugDraw">
            Debug draw draws objects in wireframe.
        </constant>
        <constant name="SCENARIO_DEBUG_DISABLED" value="0" enum="RenderingServerEnums.ScenarioDebugMode">
            Do not use a debug mode.
        </constant>
        <constant name="SCENARIO_DEBUG_WIREFRAME" value="1" enum="RenderingServerEnums.ScenarioDebugMode">
            Draw all objects as wireframe models.
        </constant>
        <constant name="SCENARIO_DEBUG_OVERDRAW" value="2" enum="RenderingServerEnums.ScenarioDebugMode">
            Draw all objects in a way that displays how much overdraw is occurring. Overdraw occurs when a section of pixels is drawn and shaded and then another object covers it up. To optimize a scene, you should reduce overdraw.
        </constant>
        <constant name="SCENARIO_DEBUG_SHADELESS" value="3" enum="RenderingServerEnums.ScenarioDebugMode">
            Draw all objects without shading. Equivalent to setting all objects shaders to [code]unshaded[/code].
        </constant>
        <constant name="INSTANCE_NONE" value="0" enum="RenderingServerEnums.InstanceType">
            The instance does not have a type.
        </constant>
        <constant name="INSTANCE_MESH" value="1" enum="RenderingServerEnums.InstanceType">
            The instance is a mesh.
        </constant>
        <constant name="INSTANCE_MULTIMESH" value="2" enum="RenderingServerEnums.InstanceType">
            The instance is a multimesh.
        </constant>
        <constant name="INSTANCE_IMMEDIATE" value="3" enum="RenderingServerEnums.InstanceType">
            The instance is an immediate geometry.
        </constant>
        <constant name="INSTANCE_PARTICLES" value="4" enum="RenderingServerEnums.InstanceType">
            The instance is a particle emitter.
        </constant>
        <constant name="INSTANCE_LIGHT" value="5" enum="RenderingServerEnums.InstanceType">
            The instance is a light.
        </constant>
        <constant name="INSTANCE_REFLECTION_PROBE" value="6" enum="RenderingServerEnums.InstanceType">
            The instance is a reflection probe.
        </constant>
        <constant name="INSTANCE_GI_PROBE" value="7" enum="RenderingServerEnums.InstanceType">
            The instance is a GI probe.
        </constant>
        <constant name="INSTANCE_LIGHTMAP_CAPTURE" value="8" enum="RenderingServerEnums.InstanceType">
            The instance is a lightmap capture.
        </constant>
        <constant name="INSTANCE_MAX" value="9" enum="RenderingServerEnums.InstanceType">
            Represents the size of the [enum InstanceType] enum.
        </constant>
        <constant name="INSTANCE_GEOMETRY_MASK" value="30" enum="RenderingServerEnums.InstanceType">
            A combination of the flags of geometry instances (mesh, multimesh, immediate and particles).
        </constant>
        <constant name="INSTANCE_FLAG_USE_BAKED_LIGHT" value="0" enum="RenderingServerEnums.InstanceFlags">
            Allows the instance to be used in baked lighting.
        </constant>
        <constant name="INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE" value="1" enum="RenderingServerEnums.InstanceFlags">
            When set, manually requests to draw geometry on next frame.
        </constant>
        <constant name="INSTANCE_FLAG_MAX" value="2" enum="RenderingServerEnums.InstanceFlags">
            Represents the size of the [enum InstanceFlags] enum.
        </constant>
        <constant name="SHADOW_CASTING_SETTING_OFF" value="0" enum="RenderingServerEnums.ShadowCastingSetting">
            Disable shadows from this instance.
        </constant>
        <constant name="SHADOW_CASTING_SETTING_ON" value="1" enum="RenderingServerEnums.ShadowCastingSetting">
            Cast shadows from this instance.
        </constant>
        <constant name="SHADOW_CASTING_SETTING_DOUBLE_SIDED" value="2" enum="RenderingServerEnums.ShadowCastingSetting">
            Disable backface culling when rendering the shadow of the object. This is slightly slower but may result in more correct shadows.
        </constant>
        <constant name="SHADOW_CASTING_SETTING_SHADOWS_ONLY" value="3" enum="RenderingServerEnums.ShadowCastingSetting">
            Only render the shadows from the object. The object itself will not be drawn.
        </constant>
        <constant name="NINE_PATCH_STRETCH" value="0" enum="RenderingServerEnums.NinePatchAxisMode">
            The nine patch gets stretched where needed.
        </constant>
        <constant name="NINE_PATCH_TILE" value="1" enum="RenderingServerEnums.NinePatchAxisMode">
            The nine patch gets filled with tiles where needed.
        </constant>
        <constant name="NINE_PATCH_TILE_FIT" value="2" enum="RenderingServerEnums.NinePatchAxisMode">
            The nine patch gets filled with tiles where needed and stretches them a bit if needed.
        </constant>
        <constant name="CANVAS_LIGHT_MODE_ADD" value="0" enum="RenderingServerEnums.CanvasLightMode">
            Adds light color additive to the canvas.
        </constant>
        <constant name="CANVAS_LIGHT_MODE_SUB" value="1" enum="RenderingServerEnums.CanvasLightMode">
            Adds light color subtractive to the canvas.
        </constant>
        <constant name="CANVAS_LIGHT_MODE_MIX" value="2" enum="RenderingServerEnums.CanvasLightMode">
            The light adds color depending on transparency.
        </constant>
        <constant name="CANVAS_LIGHT_MODE_MASK" value="3" enum="RenderingServerEnums.CanvasLightMode">
            The light adds color depending on mask.
        </constant>
        <constant name="CANVAS_LIGHT_FILTER_NONE" value="0" enum="RenderingServerEnums.CanvasLightShadowFilter">
            Do not apply a filter to canvas light shadows.
        </constant>
        <constant name="CANVAS_LIGHT_FILTER_PCF3" value="1" enum="RenderingServerEnums.CanvasLightShadowFilter">
            Use PCF3 filtering to filter canvas light shadows.
        </constant>
        <constant name="CANVAS_LIGHT_FILTER_PCF5" value="2" enum="RenderingServerEnums.CanvasLightShadowFilter">
            Use PCF5 filtering to filter canvas light shadows.
        </constant>
        <constant name="CANVAS_LIGHT_FILTER_PCF7" value="3" enum="RenderingServerEnums.CanvasLightShadowFilter">
            Use PCF7 filtering to filter canvas light shadows.
        </constant>
        <constant name="CANVAS_LIGHT_FILTER_PCF9" value="4" enum="RenderingServerEnums.CanvasLightShadowFilter">
            Use PCF9 filtering to filter canvas light shadows.
        </constant>
        <constant name="CANVAS_LIGHT_FILTER_PCF13" value="5" enum="RenderingServerEnums.CanvasLightShadowFilter">
            Use PCF13 filtering to filter canvas light shadows.
        </constant>
        <constant name="CANVAS_OCCLUDER_POLYGON_CULL_DISABLED" value="0" enum="RenderingServerEnums.CanvasOccluderPolygonCullMode">
            Culling of the canvas occluder is disabled.
        </constant>
        <constant name="CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE" value="1" enum="RenderingServerEnums.CanvasOccluderPolygonCullMode">
            Culling of the canvas occluder is clockwise.
        </constant>
        <constant name="CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE" value="2" enum="RenderingServerEnums.CanvasOccluderPolygonCullMode">
            Culling of the canvas occluder is counterclockwise.
        </constant>
        <constant name="INFO_OBJECTS_IN_FRAME" value="0" enum="RenderingServerEnums.RenderInfo">
            The amount of objects in the frame.
        </constant>
        <constant name="INFO_VERTICES_IN_FRAME" value="1" enum="RenderingServerEnums.RenderInfo">
            The amount of vertices in the frame.
        </constant>
        <constant name="INFO_MATERIAL_CHANGES_IN_FRAME" value="2" enum="RenderingServerEnums.RenderInfo">
            The amount of modified materials in the frame.
        </constant>
        <constant name="INFO_SHADER_CHANGES_IN_FRAME" value="3" enum="RenderingServerEnums.RenderInfo">
            The amount of shader rebinds in the frame.
        </constant>
        <constant name="INFO_SURFACE_CHANGES_IN_FRAME" value="4" enum="RenderingServerEnums.RenderInfo">
            The amount of surface changes in the frame.
        </constant>
        <constant name="INFO_DRAW_CALLS_IN_FRAME" value="5" enum="RenderingServerEnums.RenderInfo">
            The amount of draw calls in frame.
        </constant>
        <constant name="INFO_2D_ITEMS_IN_FRAME" value="6" enum="RenderingServerEnums.RenderInfo">
            The amount of 2d items in the frame.
        </constant>
        <constant name="INFO_2D_DRAW_CALLS_IN_FRAME" value="7" enum="RenderingServerEnums.RenderInfo">
            The amount of 2d draw calls in frame.
        </constant>
        <constant name="INFO_USAGE_VIDEO_MEM_TOTAL" value="8" enum="RenderingServerEnums.RenderInfo">
            Unimplemented in the GLES2 and GLES3 rendering backends, always returns 0.
        </constant>
        <constant name="INFO_VIDEO_MEM_USED" value="9" enum="RenderingServerEnums.RenderInfo">
            The amount of video memory used, i.e. texture and vertex memory combined.
        </constant>
        <constant name="INFO_TEXTURE_MEM_USED" value="10" enum="RenderingServerEnums.RenderInfo">
            The amount of texture memory used.
        </constant>
        <constant name="INFO_VERTEX_MEM_USED" value="11" enum="RenderingServerEnums.RenderInfo">
            The amount of vertex memory used.
        </constant>
        <constant name="FEATURE_SHADERS" value="0" enum="RenderingServerEnums.Features">
            Hardware supports shaders. This enum is currently unused in Godot 3.x.
        </constant>
        <constant name="FEATURE_MULTITHREADED" value="1" enum="RenderingServerEnums.Features">
            Hardware supports multithreading. This enum is currently unused in Godot 3.x.
        </constant>
        <constant name="MULTIMESH_TRANSFORM_2D" value="0" enum="RenderingServerEnums.MultimeshTransformFormat">
            Use [Transform2D] to store MultiMesh transform.
        </constant>
        <constant name="MULTIMESH_TRANSFORM_3D" value="1" enum="RenderingServerEnums.MultimeshTransformFormat">
            Use [Transform] to store MultiMesh transform.
        </constant>
        <constant name="MULTIMESH_COLOR_NONE" value="0" enum="RenderingServerEnums.MultimeshColorFormat">
            MultiMesh does not use per-instance color.
        </constant>
        <constant name="MULTIMESH_COLOR_8BIT" value="1" enum="RenderingServerEnums.MultimeshColorFormat">
            MultiMesh color uses 8 bits per component. This packs the color into a single float.
        </constant>
        <constant name="MULTIMESH_COLOR_FLOAT" value="2" enum="RenderingServerEnums.MultimeshColorFormat">
            MultiMesh color uses a float per channel.
        </constant>
        <constant name="MULTIMESH_CUSTOM_DATA_NONE" value="0" enum="RenderingServerEnums.MultimeshCustomDataFormat">
            MultiMesh does not use custom data.
        </constant>
        <constant name="MULTIMESH_CUSTOM_DATA_8BIT" value="1" enum="RenderingServerEnums.MultimeshCustomDataFormat">
            MultiMesh custom data uses 8 bits per component. This packs the 4-component custom data into a single float.
        </constant>
        <constant name="MULTIMESH_CUSTOM_DATA_FLOAT" value="2" enum="RenderingServerEnums.MultimeshCustomDataFormat">
            MultiMesh custom data uses a float per component.
        </constant>
        <constant name="REFLECTION_PROBE_UPDATE_ONCE" value="0" enum="RenderingServerEnums.ReflectionProbeUpdateMode">
            Reflection probe will update reflections once and then stop.
        </constant>
        <constant name="REFLECTION_PROBE_UPDATE_ALWAYS" value="1" enum="RenderingServerEnums.ReflectionProbeUpdateMode">
            Reflection probe will update each frame. This mode is necessary to capture moving objects.
        </constant>
        <constant name="PARTICLES_DRAW_ORDER_INDEX" value="0" enum="RenderingServerEnums.ParticlesDrawOrder">
            Draw particles in the order that they appear in the particles array.
        </constant>
        <constant name="PARTICLES_DRAW_ORDER_LIFETIME" value="1" enum="RenderingServerEnums.ParticlesDrawOrder">
            Sort particles based on their lifetime.
        </constant>
        <constant name="PARTICLES_DRAW_ORDER_VIEW_DEPTH" value="2" enum="RenderingServerEnums.ParticlesDrawOrder">
            Sort particles based on their distance to the camera.
        </constant>
        <constant name="ENV_BG_CLEAR_COLOR" value="0" enum="RenderingServerEnums.EnvironmentBG">
            Use the clear color as background.
        </constant>
        <constant name="ENV_BG_COLOR" value="1" enum="RenderingServerEnums.EnvironmentBG">
            Use a specified color as the background.
        </constant>
        <constant name="ENV_BG_SKY" value="2" enum="RenderingServerEnums.EnvironmentBG">
            Use a sky resource for the background.
        </constant>
        <constant name="ENV_BG_COLOR_SKY" value="3" enum="RenderingServerEnums.EnvironmentBG">
            Use a custom color for background, but use a sky for shading and reflections.
        </constant>
        <constant name="ENV_BG_CANVAS" value="4" enum="RenderingServerEnums.EnvironmentBG">
            Use a specified canvas layer as the background. This can be useful for instantiating a 2D scene in a 3D world.
        </constant>
        <constant name="ENV_BG_KEEP" value="5" enum="RenderingServerEnums.EnvironmentBG">
            Do not clear the background, use whatever was rendered last frame as the background.
        </constant>
        <constant name="ENV_BG_MAX" value="7" enum="RenderingServerEnums.EnvironmentBG">
            Represents the size of the [enum EnvironmentBG] enum.
        </constant>
        <constant name="ENV_DOF_BLUR_QUALITY_LOW" value="0" enum="RenderingServerEnums.EnvironmentDOFBlurQuality">
            Use lowest blur quality. Fastest, but may look bad.
        </constant>
        <constant name="ENV_DOF_BLUR_QUALITY_MEDIUM" value="1" enum="RenderingServerEnums.EnvironmentDOFBlurQuality">
            Use medium blur quality.
        </constant>
        <constant name="ENV_DOF_BLUR_QUALITY_HIGH" value="2" enum="RenderingServerEnums.EnvironmentDOFBlurQuality">
            Used highest blur quality. Looks the best, but is the slowest.
        </constant>
        <constant name="GLOW_BLEND_MODE_ADDITIVE" value="0" enum="RenderingServerEnums.EnvironmentGlowBlendMode">
            Add the effect of the glow on top of the scene.
        </constant>
        <constant name="GLOW_BLEND_MODE_SCREEN" value="1" enum="RenderingServerEnums.EnvironmentGlowBlendMode">
            Blends the glow effect with the screen. Does not get as bright as additive.
        </constant>
        <constant name="GLOW_BLEND_MODE_SOFTLIGHT" value="2" enum="RenderingServerEnums.EnvironmentGlowBlendMode">
            Produces a subtle color disturbance around objects.
        </constant>
        <constant name="GLOW_BLEND_MODE_REPLACE" value="3" enum="RenderingServerEnums.EnvironmentGlowBlendMode">
            Shows the glow effect by itself without the underlying scene.
        </constant>
        <constant name="ENV_TONE_MAPPER_LINEAR" value="0" enum="RenderingServerEnums.EnvironmentToneMapper">
            Output color as they came in.
        </constant>
        <constant name="ENV_TONE_MAPPER_REINHARD" value="1" enum="RenderingServerEnums.EnvironmentToneMapper">
            Use the Reinhard tonemapper.
        </constant>
        <constant name="ENV_TONE_MAPPER_FILMIC" value="2" enum="RenderingServerEnums.EnvironmentToneMapper">
            Use the filmic tonemapper.
        </constant>
        <constant name="ENV_TONE_MAPPER_ACES" value="3" enum="RenderingServerEnums.EnvironmentToneMapper">
            Use the ACES tonemapper.
        </constant>
        <constant name="ENV_SSAO_QUALITY_LOW" value="0" enum="RenderingServerEnums.EnvironmentSSAOQuality">
            Lowest quality of screen space ambient occlusion.
        </constant>
        <constant name="ENV_SSAO_QUALITY_MEDIUM" value="1" enum="RenderingServerEnums.EnvironmentSSAOQuality">
            Medium quality screen space ambient occlusion.
        </constant>
        <constant name="ENV_SSAO_QUALITY_HIGH" value="2" enum="RenderingServerEnums.EnvironmentSSAOQuality">
            Highest quality screen space ambient occlusion.
        </constant>
        <constant name="ENV_SSAO_BLUR_DISABLED" value="0" enum="RenderingServerEnums.EnvironmentSSAOBlur">
            Disables the blur set for SSAO. Will make SSAO look noisier.
        </constant>
        <constant name="ENV_SSAO_BLUR_1x1" value="1" enum="RenderingServerEnums.EnvironmentSSAOBlur">
            Perform a 1x1 blur on the SSAO output.
        </constant>
        <constant name="ENV_SSAO_BLUR_2x2" value="2" enum="RenderingServerEnums.EnvironmentSSAOBlur">
            Performs a 2x2 blur on the SSAO output.
        </constant>
        <constant name="ENV_SSAO_BLUR_3x3" value="3" enum="RenderingServerEnums.EnvironmentSSAOBlur">
            Performs a 3x3 blur on the SSAO output. Use this for smoothest SSAO.
        </constant>
    </constants>
</class>
